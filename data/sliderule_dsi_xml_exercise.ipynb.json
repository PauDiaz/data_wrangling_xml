{"nbformat_minor": 0, "cells": [{"source": "# XML example and exercise\n****\n+ study examples of accessing nodes in XML tree structure  \n+ work on exercise to be completed and submitted\n****\n+ reference: https://docs.python.org/2.7/library/xml.etree.elementtree.html\n+ data source: http://www.dbis.informatik.uni-goettingen.de/Mondial\n****", "cell_type": "markdown", "metadata": {}}, {"execution_count": 1, "cell_type": "code", "source": "from xml.etree import ElementTree as ET", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "## XML example\n\n+ for details about tree traversal and iterators, see https://docs.python.org/2.7/library/xml.etree.elementtree.html", "cell_type": "markdown", "metadata": {}}, {"execution_count": 2, "cell_type": "code", "source": "document_tree = ET.parse( './data/mondial_database_less.xml' )", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"execution_count": 3, "cell_type": "code", "source": "# print names of all countries\nfor child in document_tree.getroot():\n    print child.find('name').text", "outputs": [{"output_type": "stream", "name": "stdout", "text": "Albania\nGreece\nMacedonia\nSerbia\nMontenegro\nKosovo\nAndorra\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 4, "cell_type": "code", "source": "# print names of all countries and their cities\nfor element in document_tree.iterfind('country'):\n    print '* ' + element.find('name').text + ':',\n    capitals_string = ''\n    for subelement in element.getiterator('city'):\n        capitals_string += subelement.find('name').text + ', '\n    print capitals_string[:-2]", "outputs": [{"output_type": "stream", "name": "stdout", "text": "* Albania: Tirana, Shkod\u00ebr, Durr\u00ebs, Vlor\u00eb, Elbasan, Kor\u00e7\u00eb\n* Greece: Komotini, Kavala, Athina, Peiraias, Peristeri, Acharnes, Patra, Kozani, Kerkyra, Ioannina, Thessaloniki, Iraklio, Chania, Ermoupoli, Rhodes, Tripoli, Lamia, Chalkida, Larissa, Volos, Mytilini, Karyes\n* Macedonia: Skopje, Kumanovo\n* Serbia: Beograd, Novi Sad, Ni\u0161\n* Montenegro: Podgorica\n* Kosovo: Prishtine\n* Andorra: Andorra la Vella\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "****\n## XML exercise\n\nUsing data in 'data/mondial_database.xml', the examples above, and refering to https://docs.python.org/2.7/library/xml.etree.elementtree.html, find\n\n1. 10 countries with the lowest infant mortality rates\n2. 10 cities with the largest population\n3. 10 ethnic groups with the largest overall populations (sum of best/latest estimates over all countries)\n4. name and country of a) longest river, b) largest lake and c) airport at highest elevation", "cell_type": "markdown", "metadata": {}}, {"execution_count": 5, "cell_type": "code", "source": "#Exercise 1: 10 countries with the lowest infant mortality rates\ndocument = ET.parse( './data/mondial_database.xml' )\nimport pandas as pd\n\ncountries=[]\nmortality=[]\ndfs= pd.DataFrame()\nfor element in document.iterfind('country'):\n        country=element.find('name').text\n        countries.append(country)\n        try:\n            infant_mortality=element.find('infant_mortality').text\n            mortality.append(float(infant_mortality))\n            \n        except:\n            infant_mortality=\"NAN\"\n            mortality.append(float(infant_mortality))\n            continue\ndf=pd.DataFrame({\"Countries\":countries, \"Infant mortality\":mortality})\ndf.sort([\"Infant mortality\"],ascending=True).head(10)", "outputs": [{"execution_count": 5, "output_type": "execute_result", "data": {"text/plain": "          Countries  Infant mortality\n38           Monaco              1.81\n98            Japan              2.13\n117         Bermuda              2.48\n36           Norway              2.48\n106       Singapore              2.53\n37           Sweden              2.60\n10   Czech Republic              2.63\n78        Hong Kong              2.73\n79            Macao              3.13\n44          Iceland              3.15", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Countries</th>\n      <th>Infant mortality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>38 </th>\n      <td>         Monaco</td>\n      <td> 1.81</td>\n    </tr>\n    <tr>\n      <th>98 </th>\n      <td>          Japan</td>\n      <td> 2.13</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>        Bermuda</td>\n      <td> 2.48</td>\n    </tr>\n    <tr>\n      <th>36 </th>\n      <td>         Norway</td>\n      <td> 2.48</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>      Singapore</td>\n      <td> 2.53</td>\n    </tr>\n    <tr>\n      <th>37 </th>\n      <td>         Sweden</td>\n      <td> 2.60</td>\n    </tr>\n    <tr>\n      <th>10 </th>\n      <td> Czech Republic</td>\n      <td> 2.63</td>\n    </tr>\n    <tr>\n      <th>78 </th>\n      <td>      Hong Kong</td>\n      <td> 2.73</td>\n    </tr>\n    <tr>\n      <th>79 </th>\n      <td>          Macao</td>\n      <td> 3.13</td>\n    </tr>\n    <tr>\n      <th>44 </th>\n      <td>        Iceland</td>\n      <td> 3.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 6, "cell_type": "code", "source": "#Exercise 2: 10 cities with the largest population\n", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"execution_count": 7, "cell_type": "code", "source": "%pylab inline \nimport sys\nreload(sys)  \nsys.setdefaultencoding('utf8')", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"execution_count": 8, "cell_type": "code", "source": "tree = ET.parse('./data/mondial_database.xml')\nroot = tree.getroot()\n\n#create lists to store the data for lately built the dataframe up.\ncity_list=[]\nyear_list=[]\npopu_list=[]\n\n    \nfor element in root.iter('country'): #go to node country\n\n    for city in element.iter('city'): #go to the child city\n        cities=city.find('name').text # take the name of the city\n        for pop in city.iter(): \n            if pop.tag == 'population': #take only the population elements\n                city_list.append(cities) #fill the lists above created with the city names\n                year_list.append(int(pop.attrib.get('year'))) #fill the year_list with the atributes of the population atribute Year. \n                popu_list.append(int(pop.text)) #fill the population list with the population   \n\n                \n#put the lists together into a dataframe\ndfcaca=pd.DataFrame({'City':city_list, 'Year':year_list, 'Population':popu_list})\n            #print pop.find('population').text\n\n#to report the cities with the largest population we only consider the last measurement for \n#each city. Therefore, we only take the last population data and the rest are remevoed.  \nNoDupli=dfcaca.sort(['Year','Population'],ascending=True).drop_duplicates(['City'],take_last=True)\n#Finally the dataframe is sorted by population:\nNoDupli.sort(['Population'],ascending=False).head(10).set_index(['City'])", "outputs": [{"execution_count": 8, "output_type": "execute_result", "data": {"text/plain": "           Population  Year\nCity                       \nShanghai     22315474  2010\nIstanbul     13710512  2012\nMumbai       12442373  2011\nMoskva       11979529  2013\nBeijing      11716620  2010\nS\u00e3o Paulo    11152344  2010\nTianjin      11090314  2010\nGuangzhou    11071424  2010\nDelhi        11034555  2011\nShenzhen     10358381  2010", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Population</th>\n      <th>Year</th>\n    </tr>\n    <tr>\n      <th>City</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Shanghai</th>\n      <td> 22315474</td>\n      <td> 2010</td>\n    </tr>\n    <tr>\n      <th>Istanbul</th>\n      <td> 13710512</td>\n      <td> 2012</td>\n    </tr>\n    <tr>\n      <th>Mumbai</th>\n      <td> 12442373</td>\n      <td> 2011</td>\n    </tr>\n    <tr>\n      <th>Moskva</th>\n      <td> 11979529</td>\n      <td> 2013</td>\n    </tr>\n    <tr>\n      <th>Beijing</th>\n      <td> 11716620</td>\n      <td> 2010</td>\n    </tr>\n    <tr>\n      <th>S\u00e3o Paulo</th>\n      <td> 11152344</td>\n      <td> 2010</td>\n    </tr>\n    <tr>\n      <th>Tianjin</th>\n      <td> 11090314</td>\n      <td> 2010</td>\n    </tr>\n    <tr>\n      <th>Guangzhou</th>\n      <td> 11071424</td>\n      <td> 2010</td>\n    </tr>\n    <tr>\n      <th>Delhi</th>\n      <td> 11034555</td>\n      <td> 2011</td>\n    </tr>\n    <tr>\n      <th>Shenzhen</th>\n      <td> 10358381</td>\n      <td> 2010</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"scrolled": true, "collapsed": false, "trusted": true}}, {"execution_count": 9, "cell_type": "code", "source": "len(popu_list)", "outputs": [{"execution_count": 9, "output_type": "execute_result", "data": {"text/plain": "9320"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 10, "cell_type": "code", "source": "#ploting it!\nTop10=NoDupli.sort(['Population'],ascending=False).head(10).set_index(['City'])\n\n\nTop10.sort(['Population']).plot(kind='barh', stacked=True,title=\"Cities with the largest population\", figsize=(6, 6), legend=False, fontsize=14 )\n", "outputs": [{"execution_count": 10, "output_type": "execute_result", "data": {"text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x10d876dd0>"}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\nYII=\n", "text/plain": "<matplotlib.figure.Figure at 0x10a9ef050>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 12, "cell_type": "code", "source": "#Exercise 3: 10 ethnic groups with the largest overall populations (sum of best/latest estimates over all countries)\n\n#create lists to store the data for country, ethnic group and percentage to build later a dataframe.\ncounty_list=[]\nethnics_list=[]\npercentage_list=[]\ncountries_popus=[]\npopu_country=[]\npopu_year=[]\n\n\nfor element in root.iter('country'): #go to node country\n    countries=element.find('name').text\n    for pop in element.iter(): \n            \n            if pop.tag == 'population': #take only the population elements\n                countries_popus.append(countries)\n                popu_year.append(int(pop.attrib.get('year'))) #fill the year_list with the atributes of the population atribute Year. \n                popu_country.append(int(pop.text)) #fill the population list with the population\n            elif pop.tag == 'city' or pop.tag == 'province':\n                break\n\n    for items in element.iter():      \n        if items.tag == 'ethnicgroup':#take only the ethnicgroup elements\n            county_list.append(countries)# put the country name in the proper list\n            percentage_list.append(float(items.attrib.get(\"percentage\")))\n            ethnics_list.append(items.text)\n\n#build two dataframes with info about ethnic groups, Country and percentage (Eth_per_country) \n# and a second one with the populations(popu_year).\n\nEth_per_country= pd.DataFrame({\"Country\":county_list, \"Ethnic_list\":ethnics_list, \"percentage_list\":percentage_list})\npopu_year=pd.DataFrame({\"countries_popus\":countries_popus,\"popu_country\":popu_country, \"popu_year\": popu_year})\n\n#We have to clean the popu_year data frame. That object contains the county's populations \n# together with those measured for cities and this is not convinient for us. \n#Though a conditional index we select only the latest estimation of population number.\nC=[]\nP=[]\n\nfor i in popu_year.countries_popus.unique():\n    \n    #filter by country\n    data=popu_year[popu_year.countries_popus==i].sort(\"popu_year\", ascending=False )\n    C.append(i)\n    \n    #Best population approach taking the last population meassurement\n    BPA=data[data[\"popu_year\"] == data.popu_year.max()].popu_country\n    P.append(int(BPA))\n    \n#Mixing the C and P lists into a DataFrame structure;\nCP_DF=pd.DataFrame({\"Country\":C, \"Population\": P})\n\n#CP_DF.head(2)\n\n# The two data frames: Eth_per_country and CP_DF, are merged to make easy the analysis.\nsub1 = pd.DataFrame.merge(Eth_per_country.sort(\"Country\"), CP_DF.sort(\"Country\"))\n\n# and we add a new column comming from multiply percentage_list to Population (call # of people)\nsub1.loc[:,'num_of_People'] = pd.Series((sub1.percentage_list/100)*sub1.Population, index=sub1.index)\n\n#sub1.head(2)", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 13, "cell_type": "code", "source": "# The two data frames: Eth_per_country and CP_DF, are merged to make easy the analysis.\nsub1 = pd.DataFrame.merge(Eth_per_country.sort(\"Country\"), CP_DF.sort(\"Country\"))\n\n# and we add a new column comming from multiply percentage_list to Population (call # of people)\nsub1.loc[:,'num_of_People'] = pd.Series((sub1.percentage_list/100)*sub1.Population, index=sub1.index)\n\n#sub1.head(2)", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 14, "cell_type": "code", "source": "# Hereunder we are going to work only with the columns Ethnic_list and num_of_People. Therefore the sub2 dataframe\n# is created by applying filters to the previous sub1 object. \nsub2=sub1[[\"Ethnic_list\", \"num_of_People\"]]#.set_index(\"Ethnic_list\")\n\n#Finally, the sub2 Ethnic names are grouped using the function .groupby() giving rise to the dataframe that contais \n# the 10 ethnic groups with the largest overall populations:\nFinal=sub2.groupby(\"Ethnic_list\")[[\"num_of_People\"]].sum()\nFinal.sort(\"num_of_People\", ascending=False).head(10)", "outputs": [{"execution_count": 14, "output_type": "execute_result", "data": {"text/plain": "             num_of_People\nEthnic_list               \nHan Chinese   1.245059e+09\nIndo-Aryan    8.718156e+08\nEuropean      4.948722e+08\nAfrican       3.183251e+08\nDravidian     3.027137e+08\nMestizo       1.577344e+08\nBengali       1.467769e+08\nRussian       1.318570e+08\nJapanese      1.265342e+08\nMalay         1.219936e+08", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_of_People</th>\n    </tr>\n    <tr>\n      <th>Ethnic_list</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Han Chinese</th>\n      <td> 1.245059e+09</td>\n    </tr>\n    <tr>\n      <th>Indo-Aryan</th>\n      <td> 8.718156e+08</td>\n    </tr>\n    <tr>\n      <th>European</th>\n      <td> 4.948722e+08</td>\n    </tr>\n    <tr>\n      <th>African</th>\n      <td> 3.183251e+08</td>\n    </tr>\n    <tr>\n      <th>Dravidian</th>\n      <td> 3.027137e+08</td>\n    </tr>\n    <tr>\n      <th>Mestizo</th>\n      <td> 1.577344e+08</td>\n    </tr>\n    <tr>\n      <th>Bengali</th>\n      <td> 1.467769e+08</td>\n    </tr>\n    <tr>\n      <th>Russian</th>\n      <td> 1.318570e+08</td>\n    </tr>\n    <tr>\n      <th>Japanese</th>\n      <td> 1.265342e+08</td>\n    </tr>\n    <tr>\n      <th>Malay</th>\n      <td> 1.219936e+08</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 15, "cell_type": "code", "source": "#Lets plot it! \na=Final.sort(\"num_of_People\", ascending=False).head(10)\na.plot(kind='barh', stacked=True, title=\"Ethnic groups with the largest overall populations\", figsize=(6, 6), legend=True, fontsize=14 )\n", "outputs": [{"execution_count": 15, "output_type": "execute_result", "data": {"text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x10dc24490>"}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\n", "text/plain": "<matplotlib.figure.Figure at 0x10dbda910>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 171, "cell_type": "code", "source": "#Exercise4: name and country of a) longest river, b) largest lake and c) airport at highest elevation\n\n# This is a list\ntable= pd.read_html('https://en.wikipedia.org/wiki/List_of_rivers_by_length')\n\n# this is a Dataframe\nrivers=table[5]#.set_index(1)\nrivers.columns = ['River','Name', 'Length_(km)','Length (miles)','Drainage area (km\u00b2)','Average discharge (m\u00b3/s)','Outflow','Countries_in_the_drainage_basin']\n\n#Drop the first row which shows the index twice\nrivers=rivers.drop(rivers.head(1).index)\n\n#rivers.head(4)\n#Sort by length and filter by name, length and countries\nrivers.sort('Length_(km)', ascending=False).head(1)[['Name','Countries_in_the_drainage_basin']]\n", "outputs": [{"execution_count": 171, "output_type": "execute_result", "data": {"text/plain": "                             Name       Countries_in_the_drainage_basin\n4  Mississippi\u2013Missouri\u2013Jefferson  United States (98.5%), Canada (1.5%)", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Countries_in_the_drainage_basin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td> Mississippi\u2013Missouri\u2013Jefferson</td>\n      <td> United States (98.5%), Canada (1.5%)</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "# Exercise4 b) largest lake", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 155, "cell_type": "code", "source": "tableb= pd.read_html('https://en.wikipedia.org/wiki/List_of_lakes_by_area')\n\nLakes=tableb[1]\nLakes.columns = ['NaN','Name', 'Countries','Area','Length','Maximum_depth','Water_volume','Thumbnail', 'Notes']\nLakes.set_index('Name')\n#Drop the first row which shows the index twice\nLakes=Lakes.drop(Lakes.head(1).index)#.set_index('Name')\n#Lakes.head(1)\n\nLakes.sort('Length', ascending=False).head(1)[['Name','Countries']]", "outputs": [{"execution_count": 155, "output_type": "execute_result", "data": {"text/plain": "           Name                                          Countries\n1  Caspian Sea*  Kazakhstan \u00a0Russia \u00a0Turkmenistan \u00a0Azerbaijan \u00a0...", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Countries</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td> Caspian Sea*</td>\n      <td> Kazakhstan \u00a0Russia \u00a0Turkmenistan \u00a0Azerbaijan \u00a0...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "# Exercise4 c) airport at highest elevation", "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 167, "cell_type": "code", "source": "tablec= pd.read_html('https://en.wikipedia.org/wiki/List_of_highest_commercial_airports')\nairports=tablec[0]\n\nairports.columns = ['Airport_Name', 'Countries','Coordinates ','Elevation(m)','Elevation(ft)']\nairports=airports.drop(airports.head(1).index)#.set_index('Name')\nairports.sort(\"Elevation(m)\",ascending=False).head(1)[[\"Airport_Name\",\"Countries\"]] ", "outputs": [{"execution_count": 167, "output_type": "execute_result", "data": {"text/plain": "              Airport_Name Countries\n1  Daocheng Yading Airport     China", "text/html": "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Airport_Name</th>\n      <th>Countries</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td> Daocheng Yading Airport</td>\n      <td> China</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}], "nbformat": 4, "metadata": {"kernelspec": {"display_name": "Python 2", "name": "python2", "language": "python"}}}